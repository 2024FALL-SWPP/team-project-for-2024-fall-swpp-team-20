//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/Piano.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PianoSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PianoSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Piano"",
    ""maps"": [
        {
            ""name"": ""PianoMap"",
            ""id"": ""9ce6b2dc-50e5-43a2-8872-266aa308482c"",
            ""actions"": [
                {
                    ""name"": ""PlayPiano"",
                    ""type"": ""Button"",
                    ""id"": ""e3f719b0-b2cf-4d01-b28b-0a4f52e437c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""c57e8334-f375-450e-9a5d-12587ecbbb0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3b6b3c3e-4a20-4625-9a8e-4b9270153193"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPiano"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f5f6fa8-f0b8-42fa-a193-1b42e2666801"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPiano"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e165f017-bbed-4162-961a-2ff8fcebb82d"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPiano"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a48ed3f-5905-46cb-a5cb-47fe9131db04"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPiano"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3c64a43-8f05-4a56-acd3-f14c2786ca05"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPiano"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d403e25a-c073-4fdf-bfe8-073e4a8db36d"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPiano"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b1e84ad-8727-4a2a-b18b-3fa91a790ae0"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPiano"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b722d52-6e5f-444c-8dd3-0b33388c79d7"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPiano"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8d8720c-851e-4371-9d3e-c98ac4219670"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Piano"",
            ""bindingGroup"": ""Piano"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PianoMap
        m_PianoMap = asset.FindActionMap("PianoMap", throwIfNotFound: true);
        m_PianoMap_PlayPiano = m_PianoMap.FindAction("PlayPiano", throwIfNotFound: true);
        m_PianoMap_Quit = m_PianoMap.FindAction("Quit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PianoMap
    private readonly InputActionMap m_PianoMap;
    private List<IPianoMapActions> m_PianoMapActionsCallbackInterfaces = new List<IPianoMapActions>();
    private readonly InputAction m_PianoMap_PlayPiano;
    private readonly InputAction m_PianoMap_Quit;
    public struct PianoMapActions
    {
        private @PianoSystem m_Wrapper;
        public PianoMapActions(@PianoSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayPiano => m_Wrapper.m_PianoMap_PlayPiano;
        public InputAction @Quit => m_Wrapper.m_PianoMap_Quit;
        public InputActionMap Get() { return m_Wrapper.m_PianoMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PianoMapActions set) { return set.Get(); }
        public void AddCallbacks(IPianoMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PianoMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PianoMapActionsCallbackInterfaces.Add(instance);
            @PlayPiano.started += instance.OnPlayPiano;
            @PlayPiano.performed += instance.OnPlayPiano;
            @PlayPiano.canceled += instance.OnPlayPiano;
            @Quit.started += instance.OnQuit;
            @Quit.performed += instance.OnQuit;
            @Quit.canceled += instance.OnQuit;
        }

        private void UnregisterCallbacks(IPianoMapActions instance)
        {
            @PlayPiano.started -= instance.OnPlayPiano;
            @PlayPiano.performed -= instance.OnPlayPiano;
            @PlayPiano.canceled -= instance.OnPlayPiano;
            @Quit.started -= instance.OnQuit;
            @Quit.performed -= instance.OnQuit;
            @Quit.canceled -= instance.OnQuit;
        }

        public void RemoveCallbacks(IPianoMapActions instance)
        {
            if (m_Wrapper.m_PianoMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPianoMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PianoMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PianoMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PianoMapActions @PianoMap => new PianoMapActions(this);
    private int m_PianoSchemeIndex = -1;
    public InputControlScheme PianoScheme
    {
        get
        {
            if (m_PianoSchemeIndex == -1) m_PianoSchemeIndex = asset.FindControlSchemeIndex("Piano");
            return asset.controlSchemes[m_PianoSchemeIndex];
        }
    }
    public interface IPianoMapActions
    {
        void OnPlayPiano(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
    }
}
