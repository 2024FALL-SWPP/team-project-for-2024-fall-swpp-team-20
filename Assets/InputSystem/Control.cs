//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/InputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Control: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAction"",
    ""maps"": [
        {
            ""name"": ""NewMap"",
            ""id"": ""6ff536b6-ac81-4971-b232-0527b1dfaec3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bf48aeca-0043-4501-8a5b-7a388cb276ec"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""7cdd0b93-69f2-40fe-b5ae-1cc3a2b9d822"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""18c614df-9749-4d34-ab96-70b902ce6b28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BedInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""6b860589-5c22-4ee2-a9db-55852effe1b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ObjectInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""22456a6d-1741-4645-8de0-31eac44c1fe9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f705e781-6fe1-4cb9-ab27-e66f6cf295d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""c1a2e207-c7c9-4c09-bb15-2ed3598ad352"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuitUIScript"",
                    ""type"": ""Button"",
                    ""id"": ""0f9d68e5-cb23-4dbc-a3f9-1f9f03c4aa58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""81d8788d-358f-438b-8bb6-7e303c1f1d92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""86bae1f7-ca9f-4938-9df7-24dd0c565ae3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""990c5d10-0fb2-4758-a5a1-c0e3118f258a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""deb7f5f3-b1a7-4d37-ab65-71f7097e3305"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""5cd6e18d-c13e-4b9c-8707-5203594a85d6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""9c9417c5-54e0-4de8-9f72-08ab60b367aa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d82b49e6-a5fb-48e9-a82b-91459a11d6ce"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""BedInteraction"",
                    ""id"": ""b691c52e-8e20-45e7-b8c9-61641d68def0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BedInteraction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9a79f143-f646-4c07-a771-939bcc4e355f"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BedInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2e7750ca-e924-491f-93dc-79b928724352"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BedInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6410a768-0ac7-42b6-8b5c-419713247389"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2951333d-b477-4ba9-8924-dbc91e2877f4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e70a583-30e1-451d-80fe-ed4816526506"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ObjectInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc395b6f-b686-47f9-8d5b-1668bd770e1e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1546e2e5-d197-456b-8c57-334a7d71e29c"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuitUIScript"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""607ad432-8cc3-45af-b5c2-0001f86dd1da"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // NewMap
        m_NewMap = asset.FindActionMap("NewMap", throwIfNotFound: true);
        m_NewMap_Move = m_NewMap.FindAction("Move", throwIfNotFound: true);
        m_NewMap_Rotate = m_NewMap.FindAction("Rotate", throwIfNotFound: true);
        m_NewMap_Jump = m_NewMap.FindAction("Jump", throwIfNotFound: true);
        m_NewMap_BedInteraction = m_NewMap.FindAction("BedInteraction", throwIfNotFound: true);
        m_NewMap_ObjectInteraction = m_NewMap.FindAction("ObjectInteraction", throwIfNotFound: true);
        m_NewMap_Pause = m_NewMap.FindAction("Pause", throwIfNotFound: true);
        m_NewMap_Restart = m_NewMap.FindAction("Restart", throwIfNotFound: true);
        m_NewMap_QuitUIScript = m_NewMap.FindAction("QuitUIScript", throwIfNotFound: true);
        m_NewMap_Attack = m_NewMap.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NewMap
    private readonly InputActionMap m_NewMap;
    private List<INewMapActions> m_NewMapActionsCallbackInterfaces = new List<INewMapActions>();
    private readonly InputAction m_NewMap_Move;
    private readonly InputAction m_NewMap_Rotate;
    private readonly InputAction m_NewMap_Jump;
    private readonly InputAction m_NewMap_BedInteraction;
    private readonly InputAction m_NewMap_ObjectInteraction;
    private readonly InputAction m_NewMap_Pause;
    private readonly InputAction m_NewMap_Restart;
    private readonly InputAction m_NewMap_QuitUIScript;
    private readonly InputAction m_NewMap_Attack;
    public struct NewMapActions
    {
        private @Control m_Wrapper;
        public NewMapActions(@Control wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_NewMap_Move;
        public InputAction @Rotate => m_Wrapper.m_NewMap_Rotate;
        public InputAction @Jump => m_Wrapper.m_NewMap_Jump;
        public InputAction @BedInteraction => m_Wrapper.m_NewMap_BedInteraction;
        public InputAction @ObjectInteraction => m_Wrapper.m_NewMap_ObjectInteraction;
        public InputAction @Pause => m_Wrapper.m_NewMap_Pause;
        public InputAction @Restart => m_Wrapper.m_NewMap_Restart;
        public InputAction @QuitUIScript => m_Wrapper.m_NewMap_QuitUIScript;
        public InputAction @Attack => m_Wrapper.m_NewMap_Attack;
        public InputActionMap Get() { return m_Wrapper.m_NewMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewMapActions set) { return set.Get(); }
        public void AddCallbacks(INewMapActions instance)
        {
            if (instance == null || m_Wrapper.m_NewMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NewMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @BedInteraction.started += instance.OnBedInteraction;
            @BedInteraction.performed += instance.OnBedInteraction;
            @BedInteraction.canceled += instance.OnBedInteraction;
            @ObjectInteraction.started += instance.OnObjectInteraction;
            @ObjectInteraction.performed += instance.OnObjectInteraction;
            @ObjectInteraction.canceled += instance.OnObjectInteraction;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
            @QuitUIScript.started += instance.OnQuitUIScript;
            @QuitUIScript.performed += instance.OnQuitUIScript;
            @QuitUIScript.canceled += instance.OnQuitUIScript;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(INewMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @BedInteraction.started -= instance.OnBedInteraction;
            @BedInteraction.performed -= instance.OnBedInteraction;
            @BedInteraction.canceled -= instance.OnBedInteraction;
            @ObjectInteraction.started -= instance.OnObjectInteraction;
            @ObjectInteraction.performed -= instance.OnObjectInteraction;
            @ObjectInteraction.canceled -= instance.OnObjectInteraction;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
            @QuitUIScript.started -= instance.OnQuitUIScript;
            @QuitUIScript.performed -= instance.OnQuitUIScript;
            @QuitUIScript.canceled -= instance.OnQuitUIScript;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(INewMapActions instance)
        {
            if (m_Wrapper.m_NewMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewMapActions instance)
        {
            foreach (var item in m_Wrapper.m_NewMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NewMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NewMapActions @NewMap => new NewMapActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface INewMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnBedInteraction(InputAction.CallbackContext context);
        void OnObjectInteraction(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnQuitUIScript(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
