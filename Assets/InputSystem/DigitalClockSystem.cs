//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/DigitalClock.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DigitalClockSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DigitalClockSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DigitalClock"",
    ""maps"": [
        {
            ""name"": ""DigitalClock"",
            ""id"": ""6ee92679-84dc-4656-93cc-70fbcae89a32"",
            ""actions"": [
                {
                    ""name"": ""Insert"",
                    ""type"": ""Button"",
                    ""id"": ""fc7ffbfc-756f-4e7b-942b-da4631109930"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""5d8982fc-8643-40c8-9b67-21ecffce3c36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99add803-0d6a-4f13-9eb6-fd279c76d4af"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8acda37e-df61-4f21-a91a-422364269d23"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Insert"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DigitalClock
        m_DigitalClock = asset.FindActionMap("DigitalClock", throwIfNotFound: true);
        m_DigitalClock_Insert = m_DigitalClock.FindAction("Insert", throwIfNotFound: true);
        m_DigitalClock_Quit = m_DigitalClock.FindAction("Quit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DigitalClock
    private readonly InputActionMap m_DigitalClock;
    private List<IDigitalClockActions> m_DigitalClockActionsCallbackInterfaces = new List<IDigitalClockActions>();
    private readonly InputAction m_DigitalClock_Insert;
    private readonly InputAction m_DigitalClock_Quit;
    public struct DigitalClockActions
    {
        private @DigitalClockSystem m_Wrapper;
        public DigitalClockActions(@DigitalClockSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Insert => m_Wrapper.m_DigitalClock_Insert;
        public InputAction @Quit => m_Wrapper.m_DigitalClock_Quit;
        public InputActionMap Get() { return m_Wrapper.m_DigitalClock; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DigitalClockActions set) { return set.Get(); }
        public void AddCallbacks(IDigitalClockActions instance)
        {
            if (instance == null || m_Wrapper.m_DigitalClockActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DigitalClockActionsCallbackInterfaces.Add(instance);
            @Insert.started += instance.OnInsert;
            @Insert.performed += instance.OnInsert;
            @Insert.canceled += instance.OnInsert;
            @Quit.started += instance.OnQuit;
            @Quit.performed += instance.OnQuit;
            @Quit.canceled += instance.OnQuit;
        }

        private void UnregisterCallbacks(IDigitalClockActions instance)
        {
            @Insert.started -= instance.OnInsert;
            @Insert.performed -= instance.OnInsert;
            @Insert.canceled -= instance.OnInsert;
            @Quit.started -= instance.OnQuit;
            @Quit.performed -= instance.OnQuit;
            @Quit.canceled -= instance.OnQuit;
        }

        public void RemoveCallbacks(IDigitalClockActions instance)
        {
            if (m_Wrapper.m_DigitalClockActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDigitalClockActions instance)
        {
            foreach (var item in m_Wrapper.m_DigitalClockActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DigitalClockActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DigitalClockActions @DigitalClock => new DigitalClockActions(this);
    public interface IDigitalClockActions
    {
        void OnInsert(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
    }
}
